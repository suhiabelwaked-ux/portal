from app import db
from app.models import Vulnerability, PendingVulnerability
from sqlalchemy import or_

class VulnerabilityService:
    @staticmethod
    def lookup_vulnerability(name, search_type='router'):
        """Look up vulnerability by name"""
        # First check main vulnerabilities table
        vuln = Vulnerability.query.filter_by(name=name).first()
        if vuln:
            return {
                'found': True,
                'severity': vuln.severity,
                'is_pending': False,
                'vulnerability': vuln.to_dict()
            }
        
        # Check pending vulnerabilities
        pending = PendingVulnerability.query.filter_by(name=name).first()
        if pending:
            return {
                'found': True,
                'severity': pending.severity,
                'is_pending': True,
                'vulnerability': pending.to_dict()
            }
        
        return {
            'found': False,
            'severity': None,
            'is_pending': False,
            'vulnerability': None
        }
    
    @staticmethod
    def add_pending_vulnerability(name, severity, search_type, submitted_by):
        """Add a new pending vulnerability"""
        try:
            # Check if already exists in main vulnerabilities
            existing = Vulnerability.query.filter_by(name=name).first()
            if existing:
                return None, f"Vulnerability '{name}' already exists with severity: {existing.severity}"
            
            # Check if already in pending
            pending_existing = PendingVulnerability.query.filter_by(name=name).first()
            if pending_existing:
                return None, f"Vulnerability '{name}' is already pending approval"
            
            pending_vuln = PendingVulnerability(
                name=name,
                severity=severity,
                search_type=search_type,
                submitted_by=submitted_by
            )
            
            db.session.add(pending_vuln)
            db.session.commit()
            
            return pending_vuln.to_dict(), None
            
        except Exception as e:
            db.session.rollback()
            return None, f"Error adding pending vulnerability: {str(e)}"
    
    @staticmethod
    def get_all_vulnerabilities():
        """Get all approved vulnerabilities"""
        vulns = Vulnerability.query.all()
        return [vuln.to_dict() for vuln in vulns]
    
    @staticmethod
    def get_pending_vulnerabilities():
        """Get all pending vulnerabilities"""
        pending = PendingVulnerability.query.all()
        return [p.to_dict() for p in pending]